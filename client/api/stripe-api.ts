/* tslint:disable */
/* eslint-disable */
/**
 * Final project\'s back-end API
 * Back-end API for final-project
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateStripeProductDto } from '../dto';
// @ts-ignore
import { PaymentCheckOutDto } from '../dto';
// @ts-ignore
import { UpdateStripeProductDto } from '../dto';
/**
 * StripeApi - axios parameter creator
 * @export
 */
export const StripeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PaymentCheckOutDto} paymentCheckOutDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCheckout: async (paymentCheckOutDto: PaymentCheckOutDto, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentCheckOutDto' is not null or undefined
            assertParamExists('stripeControllerCheckout', 'paymentCheckOutDto', paymentCheckOutDto)
            const localVarPath = `/stripe/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCheckOutDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateStripeProductDto} createStripeProductDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCreate: async (createStripeProductDto: CreateStripeProductDto, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStripeProductDto' is not null or undefined
            assertParamExists('stripeControllerCreate', 'createStripeProductDto', createStripeProductDto)
            const localVarPath = `/stripe/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStripeProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerFindAll: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerFindOne: async (id: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stripeControllerFindOne', 'id', id)
            const localVarPath = `/stripe/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerPaymentSuccess: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stripe/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerRemove: async (id: string, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stripeControllerRemove', 'id', id)
            const localVarPath = `/stripe/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStripeProductDto} updateStripeProductDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerUpdate: async (id: string, updateStripeProductDto: UpdateStripeProductDto, authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stripeControllerUpdate', 'id', id)
            // verify required parameter 'updateStripeProductDto' is not null or undefined
            assertParamExists('stripeControllerUpdate', 'updateStripeProductDto', updateStripeProductDto)
            const localVarPath = `/stripe/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStripeProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StripeApi - functional programming interface
 * @export
 */
export const StripeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StripeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PaymentCheckOutDto} paymentCheckOutDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerCheckout(paymentCheckOutDto: PaymentCheckOutDto, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerCheckout(paymentCheckOutDto, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateStripeProductDto} createStripeProductDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerCreate(createStripeProductDto: CreateStripeProductDto, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerCreate(createStripeProductDto, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerFindAll(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerFindAll(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerFindOne(id: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerFindOne(id, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerPaymentSuccess(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerPaymentSuccess(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerRemove(id: string, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerRemove(id, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStripeProductDto} updateStripeProductDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stripeControllerUpdate(id: string, updateStripeProductDto: UpdateStripeProductDto, authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerUpdate(id, updateStripeProductDto, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StripeApi - factory interface
 * @export
 */
export const StripeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StripeApiFp(configuration)
    return {
        /**
         * 
         * @param {PaymentCheckOutDto} paymentCheckOutDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCheckout(paymentCheckOutDto: PaymentCheckOutDto, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerCheckout(paymentCheckOutDto, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateStripeProductDto} createStripeProductDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerCreate(createStripeProductDto: CreateStripeProductDto, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerCreate(createStripeProductDto, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerFindAll(authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerFindAll(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerFindOne(id: string, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerFindOne(id, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerPaymentSuccess(options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerPaymentSuccess(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerRemove(id: string, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerRemove(id, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStripeProductDto} updateStripeProductDto 
         * @param {string} [authorization] JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeControllerUpdate(id: string, updateStripeProductDto: UpdateStripeProductDto, authorization?: string, options?: any): AxiosPromise<void> {
            return localVarFp.stripeControllerUpdate(id, updateStripeProductDto, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export class StripeApi extends BaseAPI {
    /**
     * 
     * @param {PaymentCheckOutDto} paymentCheckOutDto 
     * @param {string} [authorization] JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerCheckout(paymentCheckOutDto: PaymentCheckOutDto, authorization?: string, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerCheckout(paymentCheckOutDto, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateStripeProductDto} createStripeProductDto 
     * @param {string} [authorization] JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerCreate(createStripeProductDto: CreateStripeProductDto, authorization?: string, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerCreate(createStripeProductDto, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [authorization] JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerFindAll(authorization?: string, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerFindAll(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [authorization] JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerFindOne(id: string, authorization?: string, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerFindOne(id, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerPaymentSuccess(options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerPaymentSuccess(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} [authorization] JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerRemove(id: string, authorization?: string, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerRemove(id, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateStripeProductDto} updateStripeProductDto 
     * @param {string} [authorization] JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StripeApi
     */
    public stripeControllerUpdate(id: string, updateStripeProductDto: UpdateStripeProductDto, authorization?: string, options?: AxiosRequestConfig) {
        return StripeApiFp(this.configuration).stripeControllerUpdate(id, updateStripeProductDto, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
